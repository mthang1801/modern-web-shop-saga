{"version":3,"sources":["redux/shop/shop.actions.js","pages/shop/shop.component.js"],"names":["fetchCollectionsSuccess","collections","type","shopActionTypes","FETCH_COLLECTIONS_SUCCESS","payload","CollectionsOverview","lazy","CollectionPage","connect","dispatch","fetchCollections","a","FETCH_COLLECTIONS_START","collectionsRef","firestore","collection","get","snapshop","convertCollectionsSnapshotToMap","docs","error","message","FETCH_COLLECTIONS_FAIL","match","isLoading","useEffect","isExact","window","scrollTo","top","behavior","fallback","exact","path","component"],"mappings":"qMASaA,EAA0B,SAACC,GAAD,MAAkB,CACvDC,KAAMC,IAAgBC,0BACtBC,QAASJ,I,gBCNLK,EAAsBC,gBAAK,kBAC/B,iCAEIC,EAAiBD,gBAAK,kBAAM,iCAqCnBE,sBAAQ,MAJI,SAACC,GAAD,MAAe,CACxCC,iBAAkB,kBAAMD,EDvBM,uCAAiB,WAAOA,GAAP,mBAAAE,EAAA,sEAE7CF,EAhBwC,CAC1CR,KAAMC,IAAgBU,0BAgBdC,EAAiBC,IAAUC,WAAW,eAHC,SAItBF,EAAeG,MAJO,OAIvCC,EAJuC,OAKvCjB,EAAckB,YAAgCD,EAASE,MAC7DV,EAASV,EAAwBC,IANY,kDAQ7CS,GAbiCW,EAaH,KAAMC,QAbQ,CAC9CpB,KAAMC,IAAgBoB,uBACtBlB,QAASgB,KAGsC,kCALb,IAACA,IAKY,qBAAjB,2DC0BjBZ,EApCE,SAAC,GAA4C,IAA1Ce,EAAyC,EAAzCA,MAAOb,EAAkC,EAAlCA,iBAAkC,EAAhBc,UAmB3C,OAlBAC,qBAAU,WACJF,EAAMG,QACRC,OAAOC,SAAS,CACdC,IAAK,EACLC,SAAU,WAGZH,OAAOC,SAAS,CACdC,IAAK,GACLC,SAAU,aAGb,CAACP,EAAMG,UAEVD,qBAAU,WACRf,MACC,CAACA,IAGF,kBAAC,WAAD,CAAUqB,SAAU,kBAAC,IAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAMV,EAAMU,KAAMC,UAAW7B,IAC1C,kBAAC,IAAD,CACE4B,KAAI,UAAKV,EAAMU,KAAX,kBACJC,UAAW3B","file":"static/js/12.4f668664.chunk.js","sourcesContent":["import shopActionTypes from \"./shop.types\";\nimport {\n  firestore,\n  convertCollectionsSnapshotToMap,\n} from \"../../utils/firebase\";\nexport const fetchCollectionsStart = () => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_START,\n});\n\nexport const fetchCollectionsSuccess = (collections) => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collections,\n});\n\nexport const fetchCollectionsFail = (error) => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_FAIL,\n  payload: error,\n});\n\nexport const fetchCollections = (collections) => async (dispatch) => {\n  try {\n    dispatch(fetchCollectionsStart());\n    const collectionsRef = firestore.collection(\"collections\");\n    const snapshop = await collectionsRef.get();\n    const collections = convertCollectionsSnapshotToMap(snapshop.docs);\n    dispatch(fetchCollectionsSuccess(collections));\n  } catch (error) {\n    dispatch(fetchCollectionsFail(error.message));\n  }\n};\n","import React, { useEffect, lazy, Suspense } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { fetchCollections } from \"../../redux/shop/shop.actions\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/spinner/spinner.component\";\nconst CollectionsOverview = lazy(() =>\n  import(\"../../components/collections-overview/collections-overview.container\")\n);\nconst CollectionPage = lazy(() => import(\"../collection/collection.container\"));\nconst Shoppage = ({ match, fetchCollections, isLoading }) => {\n  useEffect(() => {\n    if (match.isExact) {\n      window.scrollTo({\n        top: 0,\n        behavior: \"smooth\",\n      });\n    } else {\n      window.scrollTo({\n        top: 55,\n        behavior: \"smooth\",\n      });\n    }\n  }, [match.isExact]);\n\n  useEffect(() => {\n    fetchCollections();\n  }, [fetchCollections]);\n\n  return (\n    <Suspense fallback={<Spinner />}>\n      <Switch>\n        <Route exact path={match.path} component={CollectionsOverview} />\n        <Route\n          path={`${match.path}/:collectionId`}\n          component={CollectionPage}\n        />\n      </Switch>\n    </Suspense>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCollections: () => dispatch(fetchCollections()),\n});\n\nexport default connect(null, mapDispatchToProps)(Shoppage);\n"],"sourceRoot":""}